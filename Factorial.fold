

def factorial n =
  if n == 0 then 1
  else n * factorial (n - 1)


def factorial n =
  match
  | 0 -> 1
  | n -> n * factorial (n - 1)
  end


def factorial n =
  when
  | n == 0 -> 1
  | n >  0 -> n * factorial (n - 1)
  end


def factorial 0 = 1
  | factorial n = n * factorial(n - 1)


def factorial
  | 0 -> 1
  | n -> n * factorial(n - 1)


def factorial =
  | 0 -> 1
  | n -> n * factorial(n - 1)


def 0! -> 1
  | n! -> n * (n - 1)!


-- * --


factorial (n::Int) -> Int = do
    Log.info "Will calculate factorial of {n}"
    if | (n == 0)  => 1
       | otherwise => n * factorial (n - 1)
end

"Calculates the factorial of the number `n`."
function factorial (n::Int) -> Int
    Log.info "Will calculate factorial of {n}"
    (n == 0) ? 1 : n * factorial (n - 1)
end


factorial = n => t = do
    Log.info "Will calculate factorial of {n}"
    (n == 0) ? 1 : n * factorial (n - 1)
end


factorial (n::Int) -> Int = {
    Log.info "Will calculate factorial of {n}"
    (n == 0) ? 1 : n * factorial (n - 1)
}


factorial :: Int -> Int
factorial n =
    (n == 0) ? 1 : n * factorial (n - 1)


factorial :: Int -> Int
factorial = 0 => 1
          | n => n * factorial (n - 1)


factorial :: Int -> Int
factorial
  | 0 => 1
  | n => n * factorial (n - 1)


factorial :: Int -> Int
factorial = {
    0 => 1
    n => n * factorial (n - 1)
}

factorial :: Int -> Int
factorial n | (n == 0)  => 1
            | otherwise => n * factorial (n - 1)


-- *** --

factorial :: Int -> Int
factorial n = case n
  0 -> 1
  n -> n * factorial (n - 1)
end


factorial :: Int -> Int
factorial n = case n {
  0 -> 1
  n -> n * factorial (n - 1)
}


factorial :: Int -> Int
factorial = {
  0 -> 1
  n -> n * factorial (n - 1)
}


-- Factorial in XL (eXtensible Language)
-- Source: https://en.wikipedia.org/wiki/XL_(programming_language)
--
-- 0! -> 1
-- N! -> N * (N - 1)!
--

let 0! => 1
  | n! => n * (n - 1)!


-- https://tutorial.ponylang.org/pattern-matching/case-functions.html

primitive Factorial
  fun fac_conditional(n: U64): U64 =>
    if n == 0 then
      1
    else
      n * fac_conditional(n - 1)
    end

  // dispatch based on argument match
  fun fac_case(0): U64 => 1
  fun fac_case(n: U64): U64 ? => n * (fac_case(n - 1) as U64)

  // dispatch based on guard function
  fun fac_guard(n: U64): U64 if n == 0 => 1
  fun fac_guard(n: U64): U64 ? => n * (fac_guard(n - 1) as U64)



def fac_conditional n =>
    if n == 0 then
      1
    else
      n * fac_conditional (n - 1)
    end

-- dispatch based on argument match
def fac_case 0 => 1
  | fac_case n => n * fac_case (n - 1)

-- dispatch based on guard function
def fac_guard n if n == 0 => 1
  | fac_guard n => n * fac_guard (n - 1)



