

--
-- do-end notation
--

function assoc[T] v::PersistentVector[T] i::Int el -> PersistentVector:
    boundscheck! v i
    if (i > |v| - |v.tail|):
        newtail = v.tail # (1..end)
        newtail # (mask i) := el
        PersistentVector v.trie newtail v.length
    else:
        newnode = v.trie[i][1..end]
        newnode # (mask i) := el
        PersistentVector (assoc v.trie i newnode) v.tail v.length
    end
end

function max list:
    reduce (a b -> a > b ? a : b) list
end


type Tree[a] =
    | Empty
    | Node (a, Tree[a], Tree[a])


function map :: (a -> b) -> Tree[a] -> Tree[b]
function map f =
    | Empty => Empty
    | Node (x, l, r) => Node (f x, map f l, map f r)
end


--
-- { } notation
--

function assoc[T] v::PersistentVector[T] i::Int el = {
    boundscheck! v i
    if (i > |v| - |v.tail|) {
        newtail = v.tail # (1..end)
        newtail # (mask i) := el
        PersistentVector v.trie newtail v.length
    }
    else {
        newnode = v.trie[i][1:end]
        newnode # (mask i) := el
        PersistentVector (assoc v.trie i newnode) v.tail v.length
    }
}

function max list = {
    reduce (a b -> a > b ? a : b) list
}


type Tree[a] = {
    | Empty
    | node (a, Tree[a], Tree[a])
}

function map :: (a -> b) -> Tree[a] -> Tree[b]
function map f = {
    | Empty => Empty
    | Node (x, l, r) => Node (f x, map f l, map f r)
}



--
-- indentation notation (= for block definitions)
-- (Maybe*)
--

function assoc[T] v::PersistentVector[T] i::Int el =
    boundscheck! v i
    if (i > |v| - |v.tail|):
        newtail = v.tail # (1..end)
        newtail # (mask i) := el
        PersistentVector v.trie newtail v.length
    else:
        newnode = v.trie[i][1:end]
        newnode # (mask i) := el
        PersistentVector (assoc v.trie i newnode) v.tail v.length

function max list =
    reduce (a b -> a > b ? a : b) list

type Tree[a] = Empty
             | node (a, Tree[a], Tree[a])

function map :: (a -> b) -> Tree[a] -> Tree[b]
function map f =
    | Empty => Empty
    | Node (x, l, r) => Node (f x, map f l, map f r)



--
-- haskell-like notation
-- (Maybe)
--

assoc [T](v::PersistentVector[T] i::Int el) =
    boundscheck! v i
    if (i > |v| - |v.tail|):
        newtail = v.tail # (1..end)
        newtail # (mask i) := el
        PersistentVector v.trie newtail v.length
    else:
        newnode = v.trie[i][1:end]
        newnode # (mask i) := el
        PersistentVector (assoc v.trie i newnode) v.tail v.length

max list =
    reduce (a b -> a > b ? a : b) list

type Tree[a] = Empty
             | node (a, Tree[a], Tree[a])

map :: (a -> b) -> Tree[a] -> Tree[b]
map f = | Empty => Empty
        | Node (x, l, r) => Node (f x, map f l, map f r)


--
-- indentation notation (expression definitions)
-- (No.)
--

assoc = [T](v::PersistentVector[T] i::Int el) ->
    boundscheck! v i
    if (i > |v| - |v.tail|):
        newtail = v.tail # (1..end)
        newtail # (mask i) := el
        PersistentVector v.trie newtail v.length
    else:
        newnode = v.trie[i][1:end]
        newnode # (mask i) := el
        PersistentVector (assoc v.trie i newnode) v.tail v.length

max = list ->
    reduce (a b -> a > b ? a : b) list

Tree = type[a]: Empty
              | node (a, Tree[a], Tree[a])

map :: (a -> b) -> Tree[a] -> Tree[b]
map = f -> | Empty => Empty
           | Node (x, l, r) => Node (f x, map f l, map f r)


--
-- do notation
--

function assoc[T] v::PersistentVector[T] i::Int el -> PersistentVector do
    boundscheck! v i
    if (i > |v| - |v.tail|) do
        newtail = v.tail # (1..end)
        newtail # (mask i) := el
        PersistentVector v.trie newtail v.length
    else
        newnode = v.trie[i][1:end]
        newnode # (mask i) := el
        PersistentVector (assoc v.trie i newnode) v.tail v.length
    end
end

function max list do
    reduce (a b -> a > b ? a : b) list
end

type Tree[a] =
    | Empty
    | Node (a, Tree[a], Tree[a])

function map :: (a -> b) -> Tree[a] -> Tree[b]
function map f do
    | Empty => Empty
    | Node (x, l, r) => Node (f x, map f l, map f r)
end



--
-- pyret notation
--

function assoc (v::PersistentVector a) (i::Int) (el::a) -> PersistentVector:
    boundscheck! v i
    if (i > |v| - |v.tail|):
        newtail = v.tail # (1..end)
        newtail # (mask i) := el
        PersistentVector v.trie newtail v.length
    else:
        newnode = v.trie[i][1:end]
        newnode # (mask i) := el
        PersistentVector (assoc v.trie i newnode) v.tail v.length
    end
end

height = Leaf => 0
       | Node (l, _, r) => 1 + max (height l) (height r)

type Tree a = Leaf
            | Node (Tree a, a, Tree a)

map :: (a -> b) -> Tree a -> Tree b
map f = Leaf => Leaf
      | Node (l, x, r) => Node (map f l, f x, map f r)

protocol Show a =
    show :: T -> String
end

instance Show (Tree a) =
    show = Leaf => "()"
         | Node (x, l, r) => "[{x}]: ({show l} | {show r})"
end


-- // --


(def factorial [n]
    (log/info "Will calculate factorial of {n}")
    (if (= n 0)
        1
        (* n (factorial (- n 1)))))



def factorial n do
    Log.info "Will calculate factorial of {n}"
    (n == 0) ? 1 : n * factorial (n - 1)
end

def factorial n =
    Log.info "Will calculate factorial of {n}"
    (n == 0) ? 1 : n * factorial (n - 1)
end

def factorial n:
    Log.info "Will calculate factorial of {n}"
    (n == 0) ? 1 : n * factorial (n - 1)
end

factorial n = do
    Log.info "Will calculate factorial of {n}"
    (n == 0) ? 1 : n * factorial (n - 1)
end

def factorial n = {
    Log.info "Will calculate factorial of {n}"
    (n == 0) ? 1 : n * factorial (n - 1)
}

factorial n = {
    Log.info "Will calculate factorial of {n}"
    (n == 0) ? 1 : n * factorial (n - 1)
}

