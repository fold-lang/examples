
type Pair a = { first::a, second::a }

Pair :: first: a -> second: a -> Pair a

p1 :: Pair Int = Pair (23, 22)
p2 :: Pair Str = Pair ("Hello", "Hey")

-- // --

type Pair T = (first: T, second: T)

Pair : {T : Eq,  -> (first: T, second: T) -> Pair T

p1 : Pair Int = Pair (23, 22)
p2 : Pair Str = Pair ("Hello", "Hey")


-- Collection Access Operator

-- Record access
p2.first == "Hello"
p2:first == "Hello"
p2#first == "Hello"
p2/first == "Hello"

-- Module access
List.length [1, 2, 3, 4, 5]
List:length [1, 2, 3, 4, 5]
List#length [1, 2, 3, 4, 5]
List/length [1, 2, 3, 4, 5]

-- List access
[1, 2, 3, 4] . length
[1, 2, 3, 4] : length
[1, 2, 3, 4] # length
[1, 2, 3, 4] / length

-- Inverse function application
distances_by_class . transpose >> sort >> take k >> map (#2) >> flatten
distances_by_class : transpose >> sort >> take k >> map (#2) >> flatten
distances_by_class # transpose >> sort >> take k >> map (#2) >> flatten
distances_by_class / transpose >> sort >> take k >> map (#2) >> flatten

[1 2 3 4] # 3

(# [1 2 [3, 2, 1] 4] 3 1)

[1 2 [3, 2, 1] 4] # 3 1

[1 2 [3, 2, 1] 4] # [1..3] 2
[1 2 [3, 2, 1] 4] # [1..3] # 2
([1 2 [3, 2, 1] 4] # [1..3]) # 2


{1: [1, 3] 2: ..., 3: ... 4} # [1..3]
=>

(((system :fetcher) :session) :conf)

(-> system :fetcher :session :conf)





-- // --

type Person = String Int

showPerson : Person -> String
showPerson p = let MkPerson name age = p in
                      name ++ " is " ++ show age ++ " years
                         old"


alan = { name: "Alan Turing", age: 32 }

alan = { name: "Alan Turing" age: 32 }

-- // --

type Person = (String, Int)

showPerson : Person -> String
showPerson p =
	let Person (name, age) = p in
		name ++ " is " ++ show age ++ " years old"


alan = { name: "Alan Turing", age: 32 }

alan = { name: "Alan Turing" age: 32 }




data Event = Event { eventDescription :: String
                   , eventName        :: String
                   , eventLocation    :: String
                   , eventType        :: String
                   } deriving Show


type Event = {
    event_description :: String
    event_name        :: String
    event_location    :: String
    event_type        :: String
} deriving Show


