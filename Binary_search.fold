-- 
-- Binary search
-- http://rosettacode.org/wiki/Binary_search#Metaphor
--


function {Ord a} binary_search haystack::[a] needle::a -> Int?
	function recurse low high haystack needle
		mid = (low + high) / 2
		if | high < low            -> None
		   | haystack.mid > needle -> recurse low (mid - 1) haystack needle
		   | haystack.mid < needle -> recurse (mid + 1) high haystack needle
		   | otherwise             -> Some mid
	end
	recurse 0 (#haystack - 1) haystack needle
end


fn binary_search_rec<T: Ord>(haystack: &[T], needle: T) -> Option<uint> {
    fn recurse<T: Ord>(low: uint, high: uint, haystack: &[T], needle: T) -> Option<uint> {
        match (low + high) / 2 {
            _ if high < low => None,
            mid if haystack[mid] > needle => recurse(low, mid - 1, haystack, needle),
            mid if haystack[mid] < needle => recurse(mid + 1, high, haystack, needle),
            mid => Some(mid)
        }
    }
    recurse::<T>(0, haystack.len() - 1, haystack, needle)
}


binarySearch :: Integral a => (a -> Ordering) -> (a, a) -> Maybe a
binarySearch p (low,high)
  | high < low = Nothing
  | otherwise =
      let mid = (low + high) `div` 2 in
      case p mid of
        LT -> binarySearch p (low, mid-1)
        GT -> binarySearch p (mid+1, high)
        EQ -> Just mid


binary_search :: {Comparable a} -> [a] -> a -> Int?
binary_search haystack needle =
    search 0 (#haystack - 1) haystack needle where
    search low high haystack needle =
        let mid = (low + high) / 2 in
        if | high < low             -> None
           | haystack[mid] > needle -> search low (mid - 1)  haystack needle
           | haystack[mid] < needle -> search (mid + 1) high haystack needle
           | otherwise              -> Some mid


binary_search :: {Comparable a} -> [a] -> a -> Int?
binary_search haystack needle =
    [search 0 (#haystack - 1) haystack needle] where
    [search low high haystack needle] =
        let mid = (low + high) / 2 in
        if | high < low             -> None
           | haystack[mid] > needle -> [search low (mid - 1)  haystack needle]
           | haystack[mid] < needle -> [search (mid + 1) high haystack needle]
           | otherwise              -> Some mid


binary_search{Comparable A}(haystack: [A], needle: A) -> Int? =
    search(0, |haystack| - 1, haystack, needle) where
    search(low, high, haystack, needle) =
        let mid = (low + high) / 2 in
        if | high < low             -> None
           | haystack[mid] > needle -> search(low, mid - 1,  haystack, needle)
           | haystack[mid] < needle -> search(mid + 1, high, haystack, needle)
           | otherwise              -> Some mid
