--
-- Conditional structures
-- http://rosettacode.org/wiki/Conditional_structures#Metaphor
-- https://github.com/kallisti-dev/cond/blob/master/src/Control/Conditional.hs
-- http://elixir-lang.org/getting-started/case-cond-and-if.html
-- http://research.microsoft.com/en-us/um/people/simonpj/Haskell/guards.html
-- http://en.wikipedia.org/wiki/Guarded_Command_Language

-- ## If Expression
def factorial n =
  if (n == 0)
    1
  else
    n * factorial (n - 1)
  end


def read_int ()
  if verbose then
    Console.log "reading from stdin..."
  end
  IO.stdin
  |> IO.read_line
  |> Int.parse
end



-- ## When Expressions

-- When checks multiple boolean conditions and evaluates to the result of the
-- first true condition. Exhaustiveness cheks are performed is demonstrated in
-- the following example: the compiler knows that all cases are covered meaning
-- that the otherwise case is not needed.
def compare a b =
  when
  | a  > b -> +1
  | a  < b -> -1
  | a == b ->  0
  end

-- The previous `when` expression is translated to:
if (a > b)
  +1
else if (a < b)
  -1
else
  0
end


-- * --

-- http://stackoverflow.com/questions/9345589/guards-vs-if-then-else-vs-cases-in-haskell
def nth [x & xs] n =
  when
  | n <= 0    -> None
  | n == 1    -> Some x
  | otherwise -> nth xs (n - 1)
  end


-- * --

--
-- Do-end
--

-- 1
if (n == 0)
  1
else
  n * factorial (n - 1)
end

-- 2
if (n == 0)
  1
else
  n * factorial (n - 1)
end

-- 3
if (n == 0) then
  1
else
  n * factorial (n - 1)
end

-- 4
if (n == 0)
  then 1
  else n * factorial (n - 1)
end


--
-- Braces
--

-- 1
if (n == 0) {
  1
} else {
  n * factorial (n - 1)
}

-- 2
if (n == 0)
  1
else
  n * factorial (n - 1)

-- 3
if (n == 0)
  1
else
  (n * factorial (n - 1))

-- 3
if (n == 0)
  1
else
  (n * factorial (n - 1))





-- 3
if (n == 0) then
  1
else
  n * factorial (n - 1)
end

-- 4
if (n == 0)
  then 1
  else n * factorial (n - 1)
end








if is_blank value then 0 else 1 end + acc

acc + if is_blank value then 0 else 1 end


-- Braces
-- Both versions are possible
if is_blank value then 0 else 1 + acc
if is_blank value then 0 else (1 + acc)

if is_blank value then { 0 } else { 1 } + acc

acc + if is_blank value then 0 else 1 end

-- * --


def divide top bottom =
  if bottom != 0
  then top / bottom
  else fail "division by zero"


def divide top bottom =
  if bottom != 0
    then top / bottom
    else fail "division by zero"


def divide top bottom =
  if bottom != 0 then
    top / bottom
  else
    fail "division by zero"


def divide top bottom =
  if bottom != 0 then
    top / bottom
  else fail "division by zero"


def divide top bottom =
  if bottom != 0 then top / bottom
  else fail "division by zero"


def divide top bottom =
  top / bottom if bottom != 0
  else fail "division by zero"


def divide top bottom =
  top / bottom if bottom != 0 else
  fail "division by zero"



-- * --


-- https://github.com/ocaml/ocaml/pull/715#issuecomment-239619178
let rec find x = function
  | Empty -> None
  | Node (l, v, d, r, _) ->
      let c = Ord.compare x v in
      if c < 0 then find x l else
      if c > 0 then find x r else
      d

def find x
  | Empty -> None
  | Node (l, v, d, r, _) ->
    let c = Ord.compare x v in
    when
    | c < 0     -> find x l
    | c > 0     -> find x r
    | otherwise -> d
    end
end


let rec find x = function
  | Empty -> None
  | Node (l, v, d, r, _) ->
      let c = Ord.compare x v in
      find x l if c < 0 else
      find x r if c > 0 else
      d


-- https://github.com/ocaml/ocaml/pull/715#issuecomment-235252219
if some condition then
  some thing
else (
  do something;
  do something_else)
>>= fun () ->
some other_thing


if some condition
  some thing
else
  do something;
  do something_else
end >>= fun () ->
some other_thing


if User.is_logged_in user
  View.render_profile ~user
else
  View.render_login ()
end >>= () ->
Console.log "rendered view"


-- * --

cond: x > 2 -> "Really big."
    | x < 2 -> "To small."
    | *     -> "Not interessted."


if cond : 1 else: 2 + 1

((if (x > 3)) (1 (else : 2)))

((if (x > 3)) 1) (else : 2)

my_else = else "something else"

if (x > 3): "yes" my_else


if (x > 2) "Hello" "No"

f x y z

f : x : y : z

((f : x + 5) : y) : z


((if (x > 3)) : h1: "Hello") (else : 2)

---
if :: bool -> then: a -> else: a -> a
---

if (user is logged_in):
    p: "Hello ~(user.name)!"
else:
    p: "Please sign in."

-->

if_cond : p : "Hello ~(user.name)!"
else:
    p: "Please sign in."

-->

(if_cond p) : "Hello ~(user.name)!"
else:
    p: "Please sign in."

-->

fn1 arg1: expr1 arg2: (fn2 arg1: expr1) arg3: expr3

(if a)  x  else  y

    ^   ^   ^    ^
    |   |   |    |

    (   x   ,    y)

(if_cond :: then: a -> else: a -> a) p: "Hello ~(user.name)!"
else:
    p: "Please sign in."

-- At this point the function application operation tries to match the named argument.
-- The provided function has name `p`, which it cannot match, and thus it uses the
-- application of `p` as a parameter of `then`.
-- It is important to note that the name checking is done on the type level, as it
-- will be ilustrated by the `my_else` example.


if (user is logged_in):
    (p "Hello ~(user.name)!")
else:
    (p "Please sign in.")


parser parse infix_operator


map f::(a -> b) l::[a]


2 + 2


function a::int div b::int -> int

end

2 div 3



x::a -> y::b -> z::c -> d



name :: Int -> name :: Int ->

(sum x)::Int -> (with y)::Int -> Int

-> sum x::Int -> with y::Int -> Int
-> sum 3 with 2
-> if cond::`Bool -> then::`a -> else::`a -> `a


-- # Prefix Parameter Annotation
--
-- Any function or lambda parameter can be prexifed wih

    p x :: a -> p x :: a

-- The

--
-> divide a::Int ->
       by b::Int -> Int

-> divide 10 2
-> divide 10 by: 2

--
-> if cond::Bool ->
      then::a ->
      else::a -> a


load Lang (if:then:else)


if :: Bool -> a -> else alternative::a -> a

if predicate::Bool (then consequent::a) (else alternative::a) -> a =



if (x > 3) then:
    "Too big"
else:
    "Okay"


-- With two parameter annotations:
function div a by b



function if cond::`Bool -> then::`a -> else::`a -> `a
    `if %(not cond) then:
end

if (a > 3) then:
    3
else:
    4



get "/main/:name" do:




if_then_else_ : Bool -> a -> a -> a
if condition then consequence else alternative =

---

if (x > 2):
    print "x is greater than 2"
else:
    print "x is to small..."


if (x > 2) then
    print "x is greater than 2"
else
    print "x is to small..."
end

if | (x > 2) -> print "x is greater than 2"
   | else -> print "x is to small..."


(x > 2) ? print "x is greater than 2"
        : print "x is to small..."


(x > 2) ? print "x is greater than 2"
        : print "x is to small..."


-- // --


if | x > 3 => "hello"
   | else  => "no"

if x > 3 then: "hello"
   y < 2 then: "yes"
         else: "no"

if | x > 3 => "hello"
   | else  => "no"

cond | x > 3 => "hello"
     | else  => "no"

cond {
  x > 3 -> "hello"
  else  -> "no"
}


case [1..99] \\ gen_random_list
    | []  then: "empty list"
    | [x] then: "one element only"
    | xs  then
        "everything else"
    end

if x > 3 -> "hello" | "no"

if | x > 3 -> "hello"
   | else -> "no"
end


if did_succeed?
  print "ok"
else
  print "no"
end


if did_succeed? {
  print "ok"
} else {
  print "no"
}


-- * --

-- (defun factorial (n)
--   (if (= n 0) 1
--     (* n (factorial (- n 1)))))

factorial n =
  if (n == 0)
    then 1
    else factorial (n - 1)

factorial n =
  if (n == 0)
    then: 1
    else: factorial (n - 1)



