
--
-- Prefix Function Application
--

-> - 1
-- ^~~
-- ` unary prefix function application

-> - 1 2
-- ^~~~~
-- ` binary prefix function application


-> f a b = a + b

-> f 2 3 - 1
 = (- (f 2 3) 1)


-> f 3 3 - 1
-- ^~~~~ ^~~
-- |     |
-- ` prefix function application
--       |
--       ` infix function application
 = (- (f 3 3) 1)

-> f 3 - 1
-- ^~~
-- Error: This expression has type Int -> Int
--        but expression was expected of type Int
= (- (f 3) 1)

-> f 3 (- 1)
 = 2

-- The prefix functions are parsed until an infix function is found, this means
-- that the arithmetic operations can be written in a prefix form, since there
-- are prefix variants of the infix addition, subtraction, addition and
-- division functions.
-> - 4 2
 = 2
-> - 5 1 1 1
 = 5 - 1 - 1 - 1
 = (- 5 1 1 1)
 = (- (- (- 5 1) 1) 1)
 = 2

-> - 5 1 1 1 + 1
 = (- 5 1 1 1) + 1
 = 3


-> (view::View) did_update ~context::Context = ...

-> main_view did_update ~context

-> View.create geometry: Fullscreen did_update ~context
                         ^~~~~~~~~~
 * Error: This expression has type Geometry,
          but an expression was expected of type View.

-> (View.create geometry: Fullscreen) did_update ~context

-> sum 3 with: 4 + 5
 = sum 3 with: (4 + 5)

-- Why? Because of the `:` operator.


-> f a b c d
 = (f a b c d)

-> f a g: b c d
 = (f:g:, [a b c d])
-- FIXME: How to provide the argument order?


-- For every nud symbol, parsing is performed



module Plug.HeadTest:
  open ExUnit.Case async: true
  open Plug.Test

  @opts Plug.Head.init([])

  test "converts HEAD requests to GET requests":
    conn = Plug.Head.call (conn head: "/") @opts
    assert: conn.method == "GET"

  test "HEAD responses have headers but do not have a body":
    conn = conn head: "/"
           => Plug.Head.call opts
           >> put_resp_content_type "text/plain"
           >> send_resp 200 "Hello world"

    assert: conn.status == 200
    assert: get_resp_header conn "content-type" == ["text/plain; charset=utf-8"]
    assert: conn.resp_body == ""

