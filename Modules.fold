
--
-- Interfaces
--

protocol Animal {a}:
    init :: name: String -> a
    name :: a -> String
    talk :: a -> String
end

type Dog = { name :: String }

instance Animal {Dog}:
    init ~name = { name: name }
    name a = a.name
    talk a = "woof!"
end

laika :: Dog = { name: "Laika Kosmonavt" }
name laika   --> Laika Kosmonavt
talk laika   --> woof!

-- Module User

type User =
  { name       :: String,
    birthday   :: Date,
    profession :: Symbol }

protocol Show T:
    show :: T -> String
end


instance Show :: User:
    show u :: user -> String = u.name

    function show (u, formatter) :: user -> String
        u.name
    end
end


instance Show {Eq T} :: (List a)
    show
end

instance Show {Eq T} :: (Int -> String -> (Person, a))
    show
end

show (u::User) = u.name

show (M::Show) (x::M a) = u.name


map `round [1, 2, 3]

alice :: User =
  { name: "Alice",
    birthday: 14/08/2014,
    profession: `cat }

show alice


type ordering = LT | EQ | GT

protocol Comparable a
    function compare :: a -> a -> ordering
end

instance Comparable int
    function compare a b =
        if | a == b -> EQ
           | a >  b -> GT
           | a <  b -> LT
    end
end


----

type ordering = LT | EQ | GT

protocol Comparable a:
    compare :: a -> a -> ordering

instance Comparable Int:
    compare x y =
        if | x == y -> EQ
           | x >  y -> GT
           | x <  y -> LT

instance Comparable User =
    compare x y = compare x.name y.name


module User =
    type user = ...
    compare x y =



-- // --



module JSONCodec n do
    Log.info "Will calculate factorial of {n}"
    (n == 0) ? 1 : n * factorial (n - 1)
end

interface Codec a =
    encode :: a -> Result Data
    decode :: Data -> Result a
end

module Codec Json =
    encode = String x => "\"{x}\""
           | Object x => surround x with ('{', '}')
           | List xs  => surround (join (map encode xs) with: ',')
                             with: '"'
end

module JSONCodec n =
    Log.info "Will calculate factorial of {n}"
    (n == 0) ? 1 : n * factorial (n - 1)
end

module JSONCodec n:
    Log.info "Will calculate factorial of {n}"
    (n == 0) ? 1 : n * factorial (n - 1)
end

JSONCodec n = module
    Log.info "Will calculate factorial of {n}"
    (n == 0) ? 1 : n * factorial (n - 1)
end

module JSONCodec n = {
    Log.info "Will calculate factorial of {n}"
    (n == 0) ? 1 : n * factorial (n - 1)
}

JSONCodec n = module {
    Log.info "Will calculate factorial of {n}"
    (n == 0) ? 1 : n * factorial (n - 1)
}
